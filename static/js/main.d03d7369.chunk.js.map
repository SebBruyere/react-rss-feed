{"version":3,"sources":["containers/Sidebar/Sidebar.js","components/Item/Item.js","containers/Feed/Feed.js","common/FeedService.js","components/App.js","serviceWorker.js","index.js"],"names":["Sidebar","feedsTitles","this","props","items","length","map","oneFeed","i","key","className","React","Component","Item","href","item","link","target","src","media","rel","title","description","pubDate","feeder","Feed","rssItems","oneItem","FeedService","proxyURL","callBack","feedList","require","Promise","all","rss_feeds","feed","fetch","url","then","response","text","str","window","DOMParser","parseFromString","data","arrItemsByFeed","console","log","getItemChildNodes","media_tag","getElementsByTagName","innerHTML","sortedItems","flat","sort","a","b","Date","error","RSSData","mediaTag","feedTitle","parentTags","getTags","itemObject","getAttribute","tag","currentItem","textContent","node","tags","tagName","feedService","App","state","rssFeedsTitles","fetchRSS","titles","setState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d03d7369.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Sidebar extends React.Component {\r\n    render () {\r\n\r\n        let feedsTitles = this.props.feedsTitles;\r\n        let items = [];\r\n\r\n        if (feedsTitles.length) {\r\n            items = feedsTitles.map((oneFeed, i) => (\r\n                <div key={i} className=\"mt-4 mb-4\">\r\n                    <a>{oneFeed}</a>\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>Rss Feed</h1>\r\n                <div>\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './Item.css';\r\n\r\nfunction Item (props) {\r\n    return (\r\n        <div>\r\n            <a href={props.item.link} target=\"_blank\" className=\"wrapper-item mb-5\">\r\n                <img src={props.item.media} rel=\"Item Image\" />\r\n                <h4 className=\"mt-2 mb-3\">{props.item.title}</h4>\r\n                <p>{props.item.description}</p>\r\n            </a>\r\n            <div className=\"item-footer d-flex justify-content-between\">\r\n                <span>{props.item.pubDate}</span>\r\n                <span><i>{props.item.feeder}</i></span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Item from \"./../../components/Item\";\r\n\r\nexport default class Feed extends React.Component {\r\n\r\n    render () {\r\n\r\n        let rssItems = this.props.rssItems;\r\n        let items = [];\r\n\r\n        if (rssItems.length) {\r\n            items = rssItems.map((oneItem, i) => (\r\n                <div key={i} className=\"row\">\r\n                    <div className=\"mt-2 mb-2 col-xs-12\">\r\n                        <Item item={oneItem} />\r\n                    </div>\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                {items}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class FeedService {\r\n\r\n    constructor() {\r\n        // Might cause some slow fetching, but useful against CORS troubles\r\n        this.proxyURL = `https://cors-anywhere.herokuapp.com/`;\r\n    }\r\n\r\n    fetchRSS(callBack) {\r\n        const feedList = require('./rssfeeds.json');\r\n\r\n        try {\r\n            Promise.all(feedList.rss_feeds.map((feed) =>\r\n                fetch(this.proxyURL + feed.url)\r\n                    .then(response => response.text())\r\n                    .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\r\n            )).then(data => {\r\n                // We have here and array of feeds and their items\r\n                const arrItemsByFeed = data.map( (feed, i) => {\r\n                    console.log(feed);\r\n                    return this.getItemChildNodes(feed, feedList.rss_feeds[i].media_tag);\r\n                });\r\n                const feedsTitles = data.map( feed => feed.getElementsByTagName(\"title\")[0].innerHTML );\r\n                // We need to flaten all that to filter by date\r\n                const sortedItems = arrItemsByFeed.flat().sort( (a, b) => new Date(b.pubDate) - new Date(a.pubDate));\r\n                callBack(sortedItems, feedsTitles);\r\n            })\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    getItemChildNodes(RSSData, mediaTag) {\r\n        var filteredItem = [];\r\n        var items = RSSData.getElementsByTagName(\"item\");\r\n        var feedTitle = RSSData.getElementsByTagName(\"title\")[0].innerHTML;\r\n\r\n        // Retrieve all tag names of this DOM Node\r\n        var parentTags = this.getTags(items[0]);\r\n\r\n        // Run through all retrieved items\r\n        filteredItem = [...items].map( item => {\r\n            var itemObject = {\r\n                \"feeder\": feedTitle,\r\n                \"media\": item.getElementsByTagName(mediaTag)[0].getAttribute(\"url\")\r\n            };\r\n            parentTags.map( tag => {\r\n                var currentItem = item.getElementsByTagName(tag)[0];\r\n\r\n                // Protect from empty tag text content\r\n                if (currentItem) {\r\n                    itemObject[tag] = currentItem.textContent;\r\n                }\r\n            });\r\n            return itemObject;\r\n        });\r\n\r\n        return filteredItem;\r\n    }\r\n\r\n    getTags(node) {\r\n        var tags = node.getElementsByTagName('*');\r\n        tags = [...tags].map(tag => {\r\n            return tag.tagName;\r\n        });\r\n        return tags;\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport Sidebar from './../containers/Sidebar';\r\nimport Feed from './../containers/Feed';\r\nimport FeedService from \"./../common/FeedService\";\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst feedService = new FeedService();\r\n\r\nexport default class App extends React.Component {\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            rssItems: [],\r\n            rssFeedsTitles: []\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        feedService.fetchRSS( (items, titles) => {\r\n            console.log(items);\r\n            console.log(titles);\r\n            this.setState({\r\n                rssItems: items,\r\n                rssFeedsTitles: titles\r\n            });\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n          <div className=\"App\">\r\n              <div className=\"container\">\r\n                  <div className=\"row\">\r\n                      <div className=\"col-xs-12 col-md-4 text-center mt-4\">\r\n                          <Sidebar feedsTitles={this.state.rssFeedsTitles} />\r\n                      </div>\r\n                      <div className=\"col-xs-12 col-md-8 mt-4\">\r\n                          <Feed rssItems={this.state.rssItems} />\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}