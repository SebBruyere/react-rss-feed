{"version":3,"sources":["containers/Sidebar/Sidebar.js","components/Item/Item.js","containers/Feed/Feed.js","common/FeedService.js","components/App.js","serviceWorker.js","index.js"],"names":["Sidebar","React","Component","Item","props","href","item","link","target","className","src","media","rel","title","description","Feed","rssItems","this","items","length","map","oneItem","i","key","FeedService","RSSFeedTest","APIKey","baseURL","callBack","fetch","then","response","text","str","window","DOMParser","parseFromString","data","getItemChildNodes","RSSData","getElementsByTagName","console","log","parentTags","getTags","itemObject","tag","currentItem","childElementCount","hasAttribute","prefix","getAttribute","textContent","node","tags","tagName","feedService","App","state","fetchRSS","result","setState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uSAEqBA,E,uKAGb,OACI,6BACI,0C,GALqBC,IAAMC,W,MCW5BC,MAVf,SAAeC,GACX,OACI,uBAAGC,KAAMD,EAAME,KAAKC,KAAMC,OAAO,SAASC,UAAU,qBAChD,yBAAKC,IAAKN,EAAME,KAAKK,MAAOC,IAAI,eAChC,wBAAIH,UAAU,aAAaL,EAAME,KAAKO,OACtC,2BAAIT,EAAME,KAAKQ,eCLNC,E,uKAIb,IAAIC,EAAWC,KAAKb,MAAMY,SACtBE,EAAQ,GAYZ,OAVIF,EAASG,SACTD,EAAQF,EAASI,KAAI,SAACC,EAASC,GAAV,OACjB,yBAAKC,IAAKD,EAAGb,UAAU,OACnB,yBAAKA,UAAU,uBACX,kBAAC,EAAD,CAAMH,KAAMe,UAOxB,yBAAKZ,UAAU,mBACVS,O,GAnBiBjB,IAAMC,W,OCHnBsB,E,WAEjB,aAAe,oBACXP,KAAKQ,YAAL,qCACAR,KAAKS,OAAL,2CACAT,KAAKU,QAAL,gD,qDAGKC,GAAW,IAAD,OACfC,MAAMZ,KAAKQ,aACNK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAI,IAAIC,OAAOC,WAAYC,gBAAgBH,EAAK,eACxDH,MAAK,SAAAO,GAAI,OAAIT,EAAU,EAAKU,kBAAkBD,S,wCAGrCE,GAEd,IACIrB,EAAQqB,EAAQC,qBAAqB,QAEzCC,QAAQC,IAAIxB,GAGZ,IAAIyB,EAAa1B,KAAK2B,QAAQ1B,EAAM,IAgCpC,OA7Be,YAAIA,GAAOE,KAAK,SAAAd,GAC3B,IAAIuC,EAAa,GAyBjB,OAxBAF,EAAWvB,KAAK,SAAA0B,GACZ,IAAIC,EAAczC,EAAKkC,qBAAqBM,GAAK,GAG7CC,IACIA,EAAYC,kBAORD,EAAYE,aAAa,SACrBF,EAAYG,OACZL,EAAWE,EAAYG,QAAUH,EAAYI,aAAa,OAE1DN,EAAWC,GAAOC,EAAYI,aAAa,QAInDN,EAAWC,GAAOC,EAAYK,gBAInCP,O,8BAMPQ,GACJ,IAAIC,EAAOD,EAAKb,qBAAqB,KAIrC,OAHAc,EAAO,YAAIA,GAAMlC,KAAI,SAAA0B,GACjB,OAAOA,EAAIS,e,KCrDjBC,G,YAAc,IAAIhC,GAEHiC,E,kDAEjB,aAAgB,IAAD,8BACX,gBAEKC,MAAQ,CACT1C,SAAU,IAJH,E,gEAQO,IAAD,OACjBwC,EAAYG,UAAU,SAACC,GACnBnB,QAAQC,IAAIkB,GACZ,EAAKC,SAAS,CACV7C,SAAU4C,S,+BAMlB,OACE,yBAAKnD,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,uCACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACX,kBAAC,EAAD,CAAMO,SAAUC,KAAKyC,MAAM1C,mB,GA5BpBf,IAAMC,WCEnB4D,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.5213e2ba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Sidebar extends React.Component {\r\n    render () {\r\n\r\n        return (\r\n            <div>\r\n                <h1>Hello</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './Item.css';\r\n\r\nfunction Item (props) {\r\n    return (\r\n        <a href={props.item.link} target=\"_blank\" className=\"wrapper-item mb-5\">\r\n            <img src={props.item.media} rel=\"Item Image\" />\r\n            <h4 className=\"mt-2 mb-3\">{props.item.title}</h4>\r\n            <p>{props.item.description}</p>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport Item from \"./../../components/Item\";\r\n\r\nexport default class Feed extends React.Component {\r\n\r\n    render () {\r\n\r\n        let rssItems = this.props.rssItems;\r\n        let items = [];\r\n\r\n        if (rssItems.length) {\r\n            items = rssItems.map((oneItem, i) => (\r\n                <div key={i} className=\"row\">\r\n                    <div className=\"mt-2 mb-2 col-xs-12\">\r\n                        <Item item={oneItem} />\r\n                    </div>\r\n                </div>\r\n            ));\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                {items}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default class FeedService {\r\n\r\n    constructor() {\r\n        this.RSSFeedTest = `https://www.lemonde.fr/rss/une.xml`;\r\n        this.APIKey = `xe3tuhc9olqsuhvn9fc8fzgtmrgdjcqnl514pxqz`;\r\n        this.baseURL = `https://api.rss2json.com/v1/api.json?rss_url=`;\r\n    }\r\n\r\n    fetchRSS(callBack) {\r\n        fetch(this.RSSFeedTest)\r\n            .then(response => response.text())\r\n            .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\r\n            .then(data => callBack( this.getItemChildNodes(data) ));\r\n    }\r\n\r\n    getItemChildNodes(RSSData) {\r\n\r\n        var filteredItem = [];\r\n        var items = RSSData.getElementsByTagName(\"item\");\r\n\r\n        console.log(items);\r\n\r\n        // Retrieve all tag names of this DOM Node\r\n        var parentTags = this.getTags(items[0]);\r\n\r\n        // Run through all retrieved items\r\n        filteredItem = [...items].map( item => {\r\n            var itemObject = {};\r\n            parentTags.map( tag => {\r\n                var currentItem = item.getElementsByTagName(tag)[0];\r\n\r\n                // Protect from empty tag text content\r\n                if (currentItem) {\r\n                    if (currentItem.childElementCount) {\r\n                        // var childTags = this.getTags(currentItem);\r\n                        // var childObj = {};\r\n                        // childTags.map( childTag => {\r\n                        //     console.log(currentItem);\r\n                        //     childObj[childTag] = currentItem.getElementsByTagName(childTag)[0]\r\n                        // });\r\n                        if (currentItem.hasAttribute(\"url\")) {\r\n                            if (currentItem.prefix) {\r\n                                itemObject[currentItem.prefix] = currentItem.getAttribute(\"url\");\r\n                            } else {\r\n                                itemObject[tag] = currentItem.getAttribute(\"url\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        itemObject[tag] = currentItem.textContent;\r\n                    }\r\n                }\r\n            });\r\n            return itemObject;\r\n        });\r\n\r\n        return filteredItem;\r\n    }\r\n\r\n    getTags(node) {\r\n        var tags = node.getElementsByTagName('*');\r\n        tags = [...tags].map(tag => {\r\n            return tag.tagName;\r\n        });\r\n        return tags;\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport Sidebar from './../containers/Sidebar';\r\nimport Feed from './../containers/Feed';\r\nimport FeedService from \"./../common/FeedService\";\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst feedService = new FeedService();\r\n\r\nexport default class App extends React.Component {\r\n\r\n    constructor () {\r\n        super();\r\n\r\n        this.state = {\r\n            rssItems: []\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        feedService.fetchRSS( (result) => {\r\n            console.log(result);\r\n            this.setState({\r\n                rssItems: result\r\n            });\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n          <div className=\"App\">\r\n              <div className=\"container\">\r\n                  <div className=\"row\">\r\n                      <div className=\"col-xs-12 col-md-4 text-center mt-4\">\r\n                          <Sidebar />\r\n                      </div>\r\n                      <div className=\"col-xs-12 col-md-8 mt-4\">\r\n                          <Feed rssItems={this.state.rssItems} />\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}